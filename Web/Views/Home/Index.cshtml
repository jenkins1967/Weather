@using Web.Html.Input
@{
    ViewBag.Title = "Home";

}

<div class="row">
    <h1 id="locationDisplay"></h1>
</div>
<div id="weatherContainer" class="row">
    <div class="todaysWeather"></div>
</div>


<textarea id="locationLog"></textarea>
<textarea id="weatherLog"></textarea>
@section scripts
{
    <script src="~/ClientTemplates/TodaysWeather.html" id="searchResultsTemplate" type="text/x-handlebars-template">
    </script>

    <script type="text/javascript">
        var userLocation;
        var repository = new Repository();
        var utility = new Utility();

        var searchHandler;

        var locationUpdateTimeout = Constants.FifteenMinutes;
        var locationUpdateInterval = null;
        var lastLocation = null;
        var autoUpdateLocationFlag = false;

        var weatherUpdateTimeout = Constants.OneHour;
        var weatherUpdateInterval = null;
        var weatherService;
        var weatherDisplayer;

        var todayTemplate;
                

        $(function() {

            //handle the go to search button
            $('#gotoSearch').on('click', function() {
                window.location.href = '@Url.Action("Search", "Home")';
            });

            initializeSearchHandler();
            initializeWeatherService();
            initializeWeatherDisplayer();

            userLocation = new UserLocation(locationUpdateHandler);

            if (userLocation.geoLocationSupported) {
                initializeAutoLocate();
            } else {
                utility.hideElement($("#autoUpdateLocation"));
                //set a default location
                locationUpdateHandler(Constants.defaultLocation, null);
            }
        });

        function initializeWeatherService() {
            var options = {
                coordinateSearchUri: '@Url.RouteUrl("WeatherForLocation",
                                       new {httproute = "true", controller = "Weather", action = "WeatherForLocation"})'
            }
            weatherService = new WeatherService(options);
        }

        function initializeWeatherDisplayer() {
            var options = {
                todayTemplateUri: '@Url.Content("~/ClientTemplates/TodaysWeather.html")'
            };
            var container = $("#weatherContainer");
            weatherDisplayer = new WeatherDisplayer(container, options);
        }

        function initializeSearchHandler() {
            var options = {
                postalSearchUri: '@Url.RouteUrl("FindZip",
                                      new {httproute = "true", controller = "Search", action = "FindZip", zipcode = ""})',
                addressSearchUri: '@Url.RouteUrl("FindAddress",
                                       new {httproute = "true", controller = "Search", action = "FindAddress", address = ""})',
                coordinateSearchUri: '@Url.RouteUrl("FindCoordinate",
                                          new {httproute = "true", controller = "Search", action = "FindCoordinate"})'
            }

            searchHandler = new Search(options);
        }

        //wires up auto locate button
        function initializeAutoLocate() {
            if (repository.getGeoLocate()) {
                $("#autoUpdateLocation").addClass("active");

                //turn on auto update
                autoUpdateLocation(true);
            }

            $("#autoUpdateLocation").on('click', function(event) {
                var element = $(event.currentTarget);
                element.toggleClass('active');
                var isOn = element.hasClass('active');
                repository.setGeoLocate(isOn);
                autoUpdateLocation(isOn);

            });
        }


        function locationUpdateHandler(location, error) {
            if (error == null) {
                error = "no errors";
            }

            if (location != null) {
                var deferred = $.Deferred();

                deferred.done(function(theLocation, theError) {
                    $("#locationError").text(theError);

                    if (!theLocation.description) {
                        searchHandler.searchLocation(theLocation).done(function(resolvedLocation) {
                            var coordLocation = utility.toCoordinate(resolvedLocation);
                            handleCompletedLocation(coordLocation);
                        });
                    } else {
                        handleCompletedLocation(theLocation);
                    }


                });

                deferred.resolve(location, error);
            }

            function handleCompletedLocation(completedLocation) {
                var locationString = new Date().toLocaleString() + "\n";
                locationString += "lat: " + completedLocation.coords.latitude + "\n";
                locationString += "lon: " + completedLocation.coords.longitude + "\n";
                if (completedLocation.description) {
                    locationString += "description: " + completedLocation.description;
                }
                locationString += "\n\n";

                if (locationChanged(completedLocation)) {
                    lastLocation = completedLocation;
                    locationString += "LOCATION CHANGED! TRIGGER UPDATE.\n";
                    updateWeather();
                }

                var display = $("#locationLog");
                display.text(display.text() + locationString);

                $("#locationDisplay").text(completedLocation.description);

                if (autoUpdateLocationFlag) {
                    //resetLocationUpdate();
                }
            }

            function locationChanged(newLocation) {
                return lastLocation == null ||
                (newLocation.coords.latitude !== lastLocation.coords.latitude ||
                    newLocation.coords.longitude !== lastLocation.coords.longitude);
            }
        }

        function autoUpdateLocation(turnOn) {
            autoUpdateLocationFlag = turnOn;
            if (turnOn) {
                //get the location
                updateLocation();
                resetLocationUpdate();
                
            } else {
                if (locationUpdateInterval != null) {
                    window.clearTimeout(locationUpdateInterval);
                    locationUpdateInterval = null;
                }
            }
        }
        function resetLocationUpdate() {
            locationUpdateInterval = window.setTimeout(updateLocation, locationUpdateTimeout);
        }

        function updateLocation() {
            console.log("Updating location...");
            userLocation.update();
        }

        function updateWeather() {
            if (lastLocation != null) {
                weatherService.getWeather(lastLocation)
                .done(displayLocationWeather);
            }
        }

        function displayLocationWeather(data) {
            $("#weatherLog").text(data);
            weatherDisplayer.load(data);
        }

    </script>

}
